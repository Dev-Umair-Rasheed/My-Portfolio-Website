package com.phone.antivirus.clean.aztac.presentation.ui.activities.antivirus

import android.Manifest
import android.app.Dialog
import android.content.Intent
import android.content.res.ColorStateList
import android.os.Build
import android.os.Bundle
import android.view.View
import androidx.activity.enableEdgeToEdge
import androidx.activity.result.contract.ActivityResultContracts
import androidx.activity.viewModels
import androidx.core.content.ContextCompat
import androidx.core.graphics.toColorInt
import androidx.core.net.toUri
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.flowWithLifecycle
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.LinearLayoutManager
import com.bumptech.glide.RequestManager
import com.det.common.R
import com.example.virusscan.components.AntiVirusScanEvents
import com.example.virusscan.components.AntiVirusScanState
import com.example.virusscan.components.ScanStatus
import com.example.virusscan.components.VirusScanType
import com.example.virusscan.domain.model.AppModel
import com.phone.antivirus.clean.aztac.core.ads.AdKeys.VIRUS_SCAN_BACK_INTERSTITIAL_KEY
import com.phone.antivirus.clean.aztac.core.ads.AdKeys.VIRUS_SCAN_BEFORE_RESULT_INTERSTITIAL_KEY
import com.phone.antivirus.clean.aztac.core.ads.AdKeys.VIRUS_SCAN_NATIVE_ID
import com.phone.antivirus.clean.aztac.core.ads.FirebaseValue.FEATURE_BACK_INTERSTITIAL_ENABLE
import com.phone.antivirus.clean.aztac.core.ads.FirebaseValue.VIRUS_SCAN_BEFORE_RESULT_INTERSTITIAL_ENABLE
import com.phone.antivirus.clean.aztac.core.ads.FirebaseValue.VIRUS_SCAN_NATIVE_ENABLE
import com.phone.antivirus.clean.aztac.core.ads.FirebaseValue.VIRUS_SCAN_NATIVE_LAYOUT_ID
import com.phone.antivirus.clean.aztac.core.ads.FirebaseValue.VIRUS_SCAN_NATIVE_PRELOAD_ENABLE
import com.phone.antivirus.clean.aztac.core.ads.interstitial_ads.InterstitialControllerListener
import com.phone.antivirus.clean.aztac.core.ads.native_ads.BaseNativeActivity
import com.phone.antivirus.clean.aztac.core.utils.DeletedFiles
import com.phone.antivirus.clean.aztac.core.utils.From
import com.phone.antivirus.clean.aztac.core.utils.IgnoredFiles
import com.phone.antivirus.clean.aztac.core.utils.InfectedFiles
import com.phone.antivirus.clean.aztac.core.utils.SETTINGS_OPEN_AD
import com.phone.antivirus.clean.aztac.core.utils.ScannedApps
import com.phone.antivirus.clean.aztac.core.utils.ScannedFiles
import com.phone.antivirus.clean.aztac.core.utils.ScannedTime
import com.phone.antivirus.clean.aztac.core.utils.gradientColorsFromBlueToGreen
import com.phone.antivirus.clean.aztac.core.utils.gradientColorsFromBlueToRed
import com.phone.antivirus.clean.aztac.core.utils.makeGone
import com.phone.antivirus.clean.aztac.core.utils.makeVisible
import com.phone.antivirus.clean.aztac.core.utils.setLog
import com.phone.antivirus.clean.aztac.core.utils.showInProgressDialog
import com.phone.antivirus.clean.aztac.core.utils.updateStatusBarColor
import com.phone.antivirus.clean.aztac.core.utils.updateStatusBarIconColorWhite
import com.phone.antivirus.clean.aztac.data.localdata.PermissionData.checkAndRequestPermission
import com.phone.antivirus.clean.aztac.data.localdata.PermissionData.hasManagePermissions
import com.phone.antivirus.clean.aztac.data.localdata.PermissionData.permissionsDialogForSetting
import com.phone.antivirus.clean.aztac.data.models.Features
import com.phone.antivirus.clean.aztac.databinding.ActivityAntivirusBinding
import com.phone.antivirus.clean.aztac.presentation.adapters.ThreatAppsAdapter
import com.phone.antivirus.clean.aztac.presentation.adapters.ThreatsAdapter
import com.phone.antivirus.clean.aztac.presentation.ui.activities.ResultActivity
import com.phone.antivirus.clean.aztac.presentation.viewmodels.VirusScanViewModel
import dagger.hilt.android.AndroidEntryPoint
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.launch
import javax.inject.Inject


@AndroidEntryPoint
class AntivirusActivity : BaseNativeActivity() {

    private lateinit var binding: ActivityAntivirusBinding
    private val mViewModel: VirusScanViewModel by viewModels()
    private lateinit var threatFilesAdapter: ThreatsAdapter
    private lateinit var threatAppsAdapter: ThreatAppsAdapter
    private lateinit var dialog: Dialog
    private var noPermission = false

    private var isScanningInProgress = false
    private var totalInfectedFiles = 0
    private var ignoredFiles = 0
    private var deletedFiles = 0
    private var gradientColors = gradientColorsFromBlueToRed

    private var currentPosition = 0
    private var selectedPackages: MutableList<String> = mutableListOf()
    private var goToResult = true

    @Inject
    lateinit var requestManager: RequestManager

    private var globalState: AntiVirusScanState = AntiVirusScanState()

    private val managePermissionLauncher =
        registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->
            checkPermissionAndGo()
        }


    private var simplePermissionLauncher = registerForActivityResult(
        ActivityResultContracts.RequestPermission()
    ) { isGranted ->
        checkPermissionAndGo()
    }

    override fun handleBackPressed() {
        if (isScanningInProgress) {
            showExitOrStopDialog()
        } else {
            updateScanStatus()
            interstitialController.showInterstitial(
                VIRUS_SCAN_BACK_INTERSTITIAL_KEY,
                mContext,
                FEATURE_BACK_INTERSTITIAL_ENABLE,
                object : InterstitialControllerListener {
                    override fun onAdClosed() {
                        finish()
                    }

                    override fun onAdLoaded() {}

                    override fun onSplashAdViewGone() {}
                })
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        activityName = "AntivirusActivity"
        super.onCreate(savedInstanceState)
        setLog("New_Intent_Check", "ON Create called of Antivirus!")
        enableEdgeToEdge()
        binding = ActivityAntivirusBinding.inflate(layoutInflater)
        setContentView(binding.root)
        ViewCompat.setOnApplyWindowInsetsListener(binding.root) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }
        binding.virusProgressBar.progress = 0
        mViewModel.onEvent(AntiVirusScanEvents.ResetVirusState)

        binding.root.postDelayed({

            with(binding) {
                scanningTopBar.title.setTextColor(ContextCompat.getColor(mContext, R.color.white))
                threatsTopBar.title.setTextColor(ContextCompat.getColor(mContext, R.color.white))
                scanningTopBar.title.text = getString(R.string.virus_cleaner)
                scanningTopBar.backArrow.setOnClickListener {
                    handleBackPressed()
                }
                threatsTopBar.backArrow.setOnClickListener {
                    handleBackPressed()
                }
            }

            checkPermissionAndGo()

        }, 50)

    }

    private fun updateScanningBg(progress: Int) {

        val colorHex = gradientColors[progress]  // e.g., "#5F93F9"
        val colorInt = colorHex.toColorInt()

        with(binding) {
            updateStatusBarIconColorWhite(
                this@AntivirusActivity, colorInt, binding.main
            )
            topRoundCard.backgroundTintList = ColorStateList.valueOf(colorInt)
        }
    }

    private fun updateThreatsBg(progress: Int) {

        val colorHex = gradientColors[progress]  // e.g., "#5F93F9"
        val colorInt = colorHex.toColorInt()

        with(binding) {
            updateStatusBarIconColorWhite(
                this@AntivirusActivity, colorInt, binding.main
            )
            topRoundThreatsCard.backgroundTintList = ColorStateList.valueOf(colorInt)
        }
    }

    private fun proceedPermission() {

        updateStatusBarColor(
            this, ContextCompat.getColor(this, R.color.theme_white), binding.main
        )

        with(binding.noPermissionLayout) {

            binding.noPermissionLayout.root.makeVisible()
            binding.lyScanning.makeGone()

            topBarPerm.title.text = getString(R.string.virus_cleaner)
            topBarPerm.backArrow.setOnClickListener {
                handleBackPressed()
            }
            txtPermissionDesc.text = getString(R.string.desc_files_permission)
            txtGuide.text = getString(R.string.guide_text)
            btnAllow.text = getString(R.string.allow)
            btnAllow.setOnClickListener {
                if (Build.VERSION.SDK_INT < Build.VERSION_CODES.R && shouldShowRequestPermissionRationale(
                        Manifest.permission.WRITE_EXTERNAL_STORAGE
                    )
                ) {
                    permissionsDialogForSetting(mContext) {}
                } else {
                    checkAndRequestPermission(mContext) { intent, stringPerm ->
                        SETTINGS_OPEN_AD = false
                        intent?.let {
                            managePermissionLauncher.launch(intent)
                        } ?: run {
                            simplePermissionLauncher.launch(stringPerm)
                        }
                    }
                }
            }
        }
    }

    private fun checkPermissionAndGo() {
        if (!hasManagePermissions(mContext)) {
            noPermission = true
            proceedPermission()
        } else {
            proceedFunctionality()
        }
    }

    private fun showExitOrStopDialog() {
        dialog = showInProgressDialog(
            context = mContext,
            title = getString(R.string.scanning_in_progress),
            msg = getString(R.string.scanning_in_progress_desc),
            onContinue = {
                dialog.dismiss()
            },
            onStop = {
                mViewModel.onEvent(AntiVirusScanEvents.StopClick())
                isScanningInProgress = false
                handleBackPressed()
            })
    }

    private fun proceedFunctionality() {

        updateStatusBarIconColorWhite(
            this, ContextCompat.getColor(this, R.color.new_ui_blue), binding.main
        )
        binding.noPermissionLayout.root.makeGone()
        binding.lyScanning.makeVisible()

        loadNativeAds()
        mViewModel.onEvent(AntiVirusScanEvents.StartScanClick(VirusScanType.Scan))
        binding.btnAction.setOnClickListener {
            showExitOrStopDialog()
        }
        binding.root.postDelayed({
            lifecycleScope.apply {
                launch {
                    mViewModel.scanState.flowWithLifecycle(lifecycle, Lifecycle.State.RESUMED)
                        .collectLatest {
                            setValuesToViews(it)
                        }
                }
            }
        }, 50)
    }

    private fun loadNativeAds() {
        binding.nativeContainer.visibility = View.VISIBLE
        initNativeAdData(
            VIRUS_SCAN_NATIVE_LAYOUT_ID,
            VIRUS_SCAN_NATIVE_ID,
            VIRUS_SCAN_NATIVE_ENABLE,
            binding.nativeContainer,
            VIRUS_SCAN_NATIVE_PRELOAD_ENABLE
        )
    }

    private fun setValuesToViews(state: AntiVirusScanState) {

        globalState = state

        with(binding) {
            when (state.scanStatus) {

                ScanStatus.FilesFetching -> {
                    isScanningInProgress = true
                    txtProcess.makeVisible()
                    tvPercent.makeGone()
                    resultCard.root.makeGone()
                    scanningCard.root.makeVisible()
                    txtProcess.text = getString(R.string.fetching_files)
                    txtScanPath.text = buildString {
                        append("Fetching: ")
                        append(state.filePath)
                    }
                    updateScanningBg(0)
                    virusProgressBar.progress = 0
                    resultCard.txtScanningStatus.text = getString(R.string.fetching_files)
                    resultCard.txtInfectedFilesCount.text = "..."
                    resultCard.txtScannedFilesCount.text = "..."
                    resultCard.txtTotalAppsCount.text = "..."
                    resultCard.txtAppsCount.makeGone()
                    resultCard.txtFilesCount.makeGone()
                    resultCard.root.makeVisible()
                    scanningCard.root.makeGone()
                }

                ScanStatus.PreVirusScanning -> {
                    resultCard.root.makeGone()
                    scanningCard.root.makeVisible()
                    /*txtProcess.makeVisible()
                    tvPercent.makeGone()*/
                    txtProcess.text = getString(R.string.scanning)
                    txtScanPath.text = buildString {
                        append("Scanning: ")
                        append("Initiating...")
                    }
                    /*scanningCard.txtApps.text = buildString {
                        append("Apps")
                        append(" (")
                        append(state.scannedApps.toString())
                        append("/")
                        append(state.totalApps.toString())
                        append(")")
                    }*/
                    scanningCard.txtApps.text = buildString {
                        append("Apps")
                        append(" (")
                        append(state.totalApps.toString())
                        append(")")
                    }
                    /*scanningCard.txtFiles.text = buildString {
                        append("Files")
                        append(" (")
                        append(state.scannedCount.toString())
                        append("/")
                        append(state.totalFiles.toString())
                        append(")")
                    }*/
                    scanningCard.txtFiles.text = buildString {
                        append("Files")
                        append(" (")
                        append(state.totalFiles.toString())
                        append(")")
                    }
                    requestManager
                        .load(state.appModel?.icon)
                        .placeholder(R.drawable.apk_icon)
                        .error(R.drawable.apk_icon)
                        .into(scanningCard.icApps)
                    scanningCard.txtAppsPath.text = state.appModel?.appName
                    scanningCard.txtFilesPath.text = state.filePath
                    scanningCard.txtScanEstimation.text = state.estimateScanTime
                }

                ScanStatus.VirusScanning -> {
                    resultCard.root.makeVisible()
                    scanningCard.root.makeGone()
                    setLog("Antivirus_Log", "VirusScanning: ${state.fileProgress}")
                    setLog("Antivirus_Log", "Infected Files: ${state.totalThreat()}")
                    txtProcess.makeGone()
                    tvPercent.makeVisible()
                    lyScanning.makeVisible()
                    lyThreats.makeGone()
                    resultCard.txtAppsCount.makeVisible()
                    resultCard.txtFilesCount.makeVisible()
                    resultCard.txtAppsCount.text = state.totalApps.toString()
                    resultCard.txtFilesCount.text = state.totalFiles.toString()
                    resultCard.txtScanningStatus.text = getString(R.string.scanning)
                    gradientColors = if (state.totalThreat() > 0) {
                        gradientColorsFromBlueToRed
                    } else {
                        gradientColorsFromBlueToGreen
                    }
                    tvPercent.text = buildString {
                        append(state.fileProgress)
                        append("%")
                    }
                    updateScanningBg(state.fileProgress)
                    resultCard.txtScanningStatus.text = "Retrieving results..."
                    txtScanPath.text = "Retrieving results..."
                    virusProgressBar.progress = state.fileProgress
                    resultCard.txtTotalAppsCount.text = buildString {
                        append(state.scannedApps.toString())
                        append("/")
                    }
                    resultCard.txtScannedFilesCount.text = buildString {
                        append(state.scannedFiles.toString())
                        append("/")
                    }
                    /*resultCard.vTotalApps.makeGone()
                    resultCard.vTotalFiles.makeGone()
                    resultCard.lyTotalApps.makeGone()
                    resultCard.lyTotalFiles.makeGone()*/
                    resultCard.txtInfectedFilesCount.text = state.infectedFiles.toString()
                }

                ScanStatus.ScanCompleted -> {
                    isScanningInProgress = false
                    setLog("Antivirus_Log", "ScanCompleted: ${state.totalThreat()}")
                    setLog("Antivirus_Log", "ScanCompleted: Virus Apps: ${state.appList}")
                    setLog("Antivirus_Log", "ScanCompleted: Time Taken: ${state.timeInStr}")
                    if (::dialog.isInitialized && dialog.isShowing) {
                        dialog.dismiss()
                    }
                    if (state.totalThreat() == 0) {
                        moveToResult(state)
                    } else {
                        mViewModel.onEvent(AntiVirusScanEvents.showThreatsResult)
                    }
                }

                ScanStatus.ThreatsResult -> {
                    setUpThreatsScreen(state)
                }

                ScanStatus.VirusFinished -> {
                    setLog("Antivirus_Log", "Result from VirusFinished: ${state.totalThreat()}")
                    moveToResult(state)
                }
            }
        }
    }

    private fun setUpThreatsScreen(state: AntiVirusScanState) {

        if (state.totalThreat() == 0) {
            setLog("Antivirus_Log", "Result for setUpThreatsScreen: ${state.totalThreat()}")
            moveToResult(state)
        }

        with(binding) {

            lyScanning.makeGone()
            lyThreats.makeVisible()
            setupRecyclerView()
            setupAppsRecyclerView()

            threatsTopBar.title.text = getString(R.string.result)
            doneAnim.setAnimation(R.raw.threats_found_anim)
            threatsResultCard.txtScanningStatus.text = getString(R.string.scanned_successfully)
            binding.tvDoneHeading.text = getString(R.string.scan_completed_successfully)
            updateThreatsBg(99)

            if (totalInfectedFiles == 0) {
                totalInfectedFiles = state.totalThreat()
                txtScanResult.text = buildString {
                    append(state.totalThreat())
                    append(" ")
                    append(getString(R.string.issues_found))
                }
                threatsResultCard.txtInfectedFilesCount.text = state.totalThreat().toString()
            }

            threatsResultCard.txtAppsCount.makeGone()
            threatsResultCard.txtFilesCount.makeGone()
            threatsResultCard.txtTotalAppsCount.text = state.scannedApps.toString()
            threatsResultCard.txtScannedFilesCount.text = state.scannedFiles.toString()
            threatsResultCard.txtScanDuration.makeVisible()
            threatsResultCard.txtScanDuration.text = buildString {
                append("Duration: ")
                append(state.timeInStr)
            }

            setLog("Antivirus_Log", "VirusFinished: -> ${state.malwareList}")
            setLog("Antivirus_Log", "VirusFinished: -> ${state.appList}")
            setLog("Antivirus_Log", "VirusFinished: -> ${state.totalThreat()}")
            threatFilesAdapter.submitList(state.malwareList)
            threatAppsAdapter.submitList(state.appList)

            btnResolveAll.setOnClickListener {
                mViewModel.onEvent(AntiVirusScanEvents.RemoveVirusFiles(true))
                deletedFiles += state.malwareList.size
                if (threatAppsAdapter.currentList.isNotEmpty()) uninstallMultipleApps(
                    threatAppsAdapter.currentList
                )
            }

            btnLater.setOnClickListener {
                moveToResult(state)
            }

        }
    }

    private fun updateScanStatus() {
        if (globalState.scanStatus == ScanStatus.ScanCompleted || globalState.scanStatus == ScanStatus.ThreatsResult || globalState.scanStatus == ScanStatus.VirusFinished) {
            val infectedFilesLeft = totalInfectedFiles - deletedFiles
            if (infectedFilesLeft > 0) {
                mViewModel.onEvent(AntiVirusScanEvents.someIssuesLeft)
            } else {
                mViewModel.onEvent(AntiVirusScanEvents.allIssuesSolved)
            }
        }
    }

    private fun moveToResult(state: AntiVirusScanState) {
        setLog("Antivirus_Log", "Result from moveToResult: ${state.totalThreat()}")
        updateScanStatus()
        if (goToResult) {
            goToResult = false
            interstitialController.showInterstitial(
                VIRUS_SCAN_BEFORE_RESULT_INTERSTITIAL_KEY,
                mContext,
                VIRUS_SCAN_BEFORE_RESULT_INTERSTITIAL_ENABLE,
                object : InterstitialControllerListener {

                    override fun onAdClosed() {
                        startActivity(
                            Intent(
                                mContext, ResultActivity::class.java
                            ).apply {
                                putExtra(From, Features.VirusScan.name)
                                putExtra(InfectedFiles, totalInfectedFiles)
                                putExtra(ScannedApps, state.scannedApps)
                                putExtra(ScannedFiles, state.scannedFiles)
                                putExtra(ScannedTime, state.timeInStr)
                                putExtra(IgnoredFiles, ignoredFiles)
                                putExtra(DeletedFiles, deletedFiles)
                            })
                        finish()
                    }

                    override fun onAdLoaded() {}

                    override fun onSplashAdViewGone() {}
                })
        } else {
            return
        }
    }

    private fun setupRecyclerView() {
        threatFilesAdapter = ThreatsAdapter(onDeleteClick = { malware ->
            deletedFiles++
            mViewModel.onEvent(AntiVirusScanEvents.RemoveMalware(malware, true))
        }, onIgnoreClick = { malware ->
            ignoredFiles++
            mViewModel.onEvent(AntiVirusScanEvents.IgnoreMalware(malware))
        })
        binding.recThreatFiles.apply {
            adapter = threatFilesAdapter
            layoutManager = LinearLayoutManager(context)
        }
    }

    private fun setupAppsRecyclerView() {
        threatAppsAdapter = ThreatAppsAdapter(onDeleteClick = { app ->
            setLog("Antivirus_Log", "onDeleteClick: $app")
            uninstallApp(app)
        }, onIgnoreClick = { app ->
            ignoredFiles++
            mViewModel.onEvent(AntiVirusScanEvents.IgnoreApp(app))
        })
        binding.recThreatApps.apply {
            adapter = threatAppsAdapter
            layoutManager = LinearLayoutManager(context)
        }
    }

    private var deleteLauncher = registerForActivityResult(
        ActivityResultContracts.StartActivityForResult()
    ) { result ->
        handleUninstallResult(result.resultCode)
    }

    private fun handleUninstallResult(resultCode: Int) {
        when (resultCode) {
            RESULT_OK -> {
                mViewModel.onEvent(AntiVirusScanEvents.RemoveApp(selectedPackages[currentPosition]))
                selectedPackages.removeAt(currentPosition)
                deletedFiles++
                if (selectedPackages.isNotEmpty()) {
                    uninstallNextApp()
                } else {
                    return
                }
            }

            RESULT_CANCELED, RESULT_FIRST_USER -> {
                return
            }
        }
    }

    fun uninstallMultipleApps(
        packageNames: List<AppModel>
    ) {
        selectedPackages = packageNames.map { it.pkgName }.toMutableList()
        currentPosition = 0
        if (selectedPackages.isNotEmpty()) {
            uninstallNextApp()
        } else {
            return
        }
    }

    fun uninstallApp(
        packageName: AppModel,
    ) {
        selectedPackages.clear()
        selectedPackages = mutableListOf(packageName.pkgName)
        currentPosition = 0
        uninstallNextApp()
    }

    private fun uninstallNextApp() {
        if (currentPosition >= selectedPackages.size) {
            return
        }

        try {
            val packageName = selectedPackages[currentPosition]
            val intent = Intent(Intent.ACTION_DELETE).apply {
                data = "package:$packageName".toUri()
                putExtra(Intent.EXTRA_RETURN_RESULT, true)
            }
            deleteLauncher.launch(intent)
        } catch (e: Exception) {
            currentPosition++
            uninstallNextApp()
        }
    }

    override fun onNewIntent(intent: Intent) {
        super.onNewIntent(intent)
        setLog("New_Intent_Check", "New Intent called of Antivirus!")
        finish() // Destroy this existing instance
        startActivity(intent) // Start a new one with updated intent
    }

    override fun onResume() {
        super.onResume()

        if (noPermission) {
            if (hasManagePermissions(mContext)) {
                noPermission = false
                proceedFunctionality()
            }
        }

    }

    override fun onDestroy() {
        binding.virusProgressBar.progress = 0
        mViewModel.onEvent(AntiVirusScanEvents.ResetVirusState)
        super.onDestroy()
    }

}